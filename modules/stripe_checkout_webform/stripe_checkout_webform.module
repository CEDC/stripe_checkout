<?php

/**
 * Default button texts.
 */
define('STRIPE_CHECKOUT_WEBFORM_CONTINUE_TEXT', t('Continue to payment >'));
define('STRIPE_CHECKOUT_WEBFORM_PAY_TEXT', t('Pay with Stripe'));
define('STRIPE_CHECKOUT_WEBFORM_CANCEL_TEXT', t('< Return to form'));

/**
 * Implements hook_webform_component_info().
 */
function stripe_checkout_webform_webform_component_info() {
  $components['stripe_checkout_webform'] = array(
    'label' => t('Stripe payment'),
    'description' => t('Displays a payment button which opens the Stripe Checkout form.'),
    'features' => array(
      'analysis' => FALSE,
      'conditional' => FALSE,
      'default_value' => FALSE,
      'email' => FALSE,
      'description' => FALSE,
      'required' => FALSE,
      'private' => FALSE,
      'title_display' => FALSE,
      'css_classes' => FALSE,
    ),
    'file' => 'stripe_checkout_webform.webform.inc',
  );
  return $components;
}

/**
 * Implements hook_form_FORM_ID_alter() for "webform_component_edit_form".
 */
function stripe_checkout_webform_form_webform_component_edit_form_alter(&$form, &$form_state) {
  // Alter the Stripe payment component edit form, since Webform doesn't pass
  // the form state to _webform_edit_stripe_checkout_webform().
  if ($form['type']['#value'] === 'stripe_checkout') {
    form_load_include($form_state, 'inc', 'stripe_checkout_webform', 'stripe_checkout_webform.webform');
    _webform_edit_stripe_checkout_webform_alter($form, $form_state);
  }

  // When editing a Select component that's being used as the dynamic amount or
  // description component, show a reminder message.
  if ($form['type']['#value'] === 'select' && !empty($form_state['build_info']['args'][1]['cid'])) {
    foreach ($form['#node']->webform['components'] as $cid => $component) {
      if ($component['type'] === 'stripe_checkout') {
        foreach (array('amount', 'description') as $setting) {
          foreach (array('value', 'plan') as $type) {
            if (
              $component['extra']["{$setting}_type"] === "{$type}_component"
              && isset($component['extra']["{$setting}_{$type}_component"])
              && $component['extra']["{$setting}_{$type}_component"] === $form_state['build_info']['args'][1]['cid']
            ) {
              drupal_set_message(t('The Stripe payment component is using this field to populate the %setting. If you add options to this field, be sure to also update the Stripe payment options.', array(
                '%setting' => $setting,
              )), 'warning');
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for "webform_client_form".
 */
function stripe_checkout_webform_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  form_load_include($form_state, 'inc', 'stripe_checkout_webform', 'stripe_checkout_webform.webform');
  _stripe_checkout_webform_form_webform_client_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter() for "webform_configure_form".
 */
function stripe_checkout_webform_form_webform_configure_form_alter(&$form, &$form_state) {
  // If form has Stripe payment component, disable the Submit button label
  // field and let the user know why.
  foreach ($form['#node']->webform['components'] as $component) {
    if ($component['type'] === 'stripe_checkout') {
      $form['advanced']['submit_text']['#disabled'] = TRUE;
      $form['advanced']['submit_text']['#description'] = t('This form has a Stripe payment component, which changes the way the Submit button works, so this field has no effect and has been disabled.');
    }
  }
}


/**
 * Returns Stripe Checkout settings.
 */
function stripe_checkout_webform_checkout_settings() {
  // Merge variable settings with default settings.
  $config = ('stripe_checkout');
  return array(
    'name' => (null !== ($config->get('name'))) ? $config->get('name') : config_get('system.core', 'site_name'),
    'image' => (null !== ($config->get('image'))) ? $config->get('image') : '',
    'currency' => (null !== ($config->get('currency'))) ? $config->get('currency') : 'USD',
    'locale' => (null !== ($config->get('locale'))) ? $config->get('locale') : 'auto',
    'zip-code' => (null !== ($config->get('zip'))) ? $config->get('zip') : TRUE,
    'billing-address' => (null !== ($config->get('billing-addr'))) ? $config->get('billing-addr') : FALSE,
    'shipping-address' => (null !== ($config->get('shipping-addr'))) ? $config->get('shipping-addr') : FALSE,
    'allow-remember-me' => (null !== ($config->get('allow-remember-me'))) ? $config->get('allow-remember-me') : FALSE,
    'bitcoin' => (null !== ($config->get('bitcoin'))) ? $config->get('bitcoin') : FALSE,
    'alipay' => (null !== ($config->get('alipay'))) ? $config->get('alipay') : FALSE,
    'alipay-reusable' => (null !== ($config->get('alipay-reusable'))) ? $config->get('alipay-reusable') : FALSE,
  );
}
