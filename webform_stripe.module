<?php

/**
 * Implements hook_permission().
 */
function webform_stripe_permission() {
  return array(
    'administer webform stripe' => array(
      'title' => t('Administer Webform Stripe settings'),
      'description' => t('Grants access to change global Stripe Checkout credentials and settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function webform_stripe_menu() {
  $items['admin/config/services/webform-stripe'] = array(
    'title' => 'Webform Stripe',
    'description' => 'Configure Stripe API for Webform.',
    'access arguments' => array('administer webform stripe'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_stripe_settings_form'),
    'file' => 'webform_stripe.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_webform_component_info().
 */
function webform_stripe_webform_component_info() {
  $components['webform_stripe'] = array(
    'label' => t('Stripe payment'),
    'description' => t('Displays a payment button which opens the Stripe Checkout form.'),
    'features' => array(
      'analysis' => FALSE,
      'default_value' => FALSE,
      'email' => FALSE,
      'description' => FALSE,
      'required' => FALSE,
      'private' => FALSE,
      'title_display' => FALSE,
      'css_classes' => FALSE,
    ),
    'file' => 'webform_stripe.webform.inc',
  );
  return $components;
}

/**
 * Implements hook_libraries_info().
 */
function webform_stripe_libraries_info() {
  return array(
    'stripe-php' => array(
      'name' => 'Stripe API Client Library for PHP',
      'vendor url' => 'https://stripe.com',
      'download url' => 'https://github.com/stripe/stripe-php',
      'dependencies' => array(),
      'version arguments' => array(
        'file' => 'VERSION',
        'pattern' => '/(\d+\.\d+\.\d+)/',
      ),
      'files' => array(
        'php' => array(
          'init.php',
        ),
      ),
    ),
  );
}

/**
 * Returns TRUE if Stripe value is a charge.
 */
function webform_stripe_is_charge($value) {
  return substr($value, 0, 3) === 'ch_';
}

/**
 * Returns Stripe Checkout settings.
 */
function webform_stripe_checkout_settings() {
  // Merge variable settings with default settings.
  return variable_get('webform_stripe_checkout_settings', array()) + array(
    'name' => variable_get('site_name', 'Drupal'),
    'image' => '',
    'currency' => 'USD',
    'locale' => 'auto',
    'zip-code' => FALSE,
    'billing-address' => FALSE,
    'shipping-address' => FALSE,
    'allow-remember-me' => FALSE,
    'bitcoin' => FALSE,
    'alipay' => FALSE,
    'alipay-reusable' => FALSE,
  );
}

/**
 * Returns Stripe Checkout component settings, ready for Javascript.
 */
function webform_stripe_checkout_settings_js($component) {
  // Merge variable settings, default settings, and component settings.
  $settings = $component['extra']['webform_stripe']
    + array('key' => variable_get('webform_stripe_publishable_key', ''))
    + webform_stripe_checkout_settings();

  // Process replacements and prepare for Javascript.
  foreach ($settings as $key => $setting) {
    // If email is enabled, grab user's email address.
    if ($key === 'email' && $setting) {
      $setting = user_uid_optional_load()->mail;
    }

    // If image is specified, convert to URL.
    if ($key === 'image' && $setting) {
      $setting = url($setting);
    }

    // Convert boolean values into strings.
    if (in_array($key, array('billing-address', 'zip-code', 'shipping-address', 'allow-remember-me', 'bitcoin', 'alipay', 'alipay-reusable'))) {
      $setting = $setting ? 'true' : 'false';
    }

    // Skip if option is empty.
    if ($setting === '') {
      unset($settings[$key]);
      continue;
    }

    $settings[$key] = check_plain($setting);
  }

  return $settings;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for "webform_client_form".
 */
function webform_stripe_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  // Look for a Stripe payment component on a form that has a Submit button.
  foreach ($form['#node']->webform['components'] as $cid => $component) {
    if ($component['type'] === 'webform_stripe' && isset($form['actions']['submit'])) {
      // New submission.
      if (empty($form['#submission'])) {
        // Wrap form with ID so we can replace it via ajax.
        $id = drupal_html_id('webform-stripe-form');
        $form['#prefix'] = '<div id="' . $id . '">';
        $form['#suffix'] = '</div>';

        $pay_text = t('Pay with Stripe');
        $continue_text = t('Continue >');
        $cancel_text = t('Return to form');

        // Hide Submit button and add our Continue button.
        if (!isset($form_state['triggering_element']) || $form_state['triggering_element']['#value'] !== $continue_text) {
          $form['actions']['submit']['#access'] = FALSE;
          $form['actions']['webform_stripe_continue'] = array(
            '#type' => 'button',
            '#value' => $continue_text,
            '#weight' => 15,
            '#ajax' => array(
              'callback' => 'webform_stripe_ajax_callback',
              'wrapper' => $id,
            ),
          );
        }

        // Continue button was clicked.
        else {
          // Hide webform fields and submit button in a way that keeps them in
          // the HTML so they can be submitted after successful payment.
          $form['submitted']['#type'] = 'container';
          $form['submitted']['#attributes']['style'] = 'display: none';
          $form['actions']['submit']['#attributes']['style'] = 'display: none';

          // If Previous button is available, hide it.
          if (isset($form['actions']['previous'])) {
            $form['actions']['previous']['#access'] = FALSE;
          }

          // Add our Pay button, which will trigger Stripe Checkout.
          $form['actions']['webform_stripe_pay'] = array(
            '#type' => 'button',
            '#value' => $pay_text,
            '#attributes' => array('class' => array('webform-stripe-pay')),
            '#attached' => array(
              'js' => array(
                array(
                  'data' => array('webform_stripe' => webform_stripe_checkout_settings_js($component)),
                  'type' => 'setting',
                ),
              ),
            ),
          );

          // Add our Cancel button, which will return to editing the form.
          $form['actions']['webform_stripe_cancel'] = array(
            '#type' => 'button',
            '#value' => $cancel_text,
            '#attributes' => array('class' => array('webform-stripe-cancel')),
            '#ajax' => array(
              'callback' => 'webform_stripe_ajax_callback',
              'wrapper' => $id,
            ),
          );
        }
      }

      // Editing submission not already having a payment.
      else if (empty($form['#submission']->data[$cid][0]) || !webform_stripe_is_charge($form['#submission']->data[$cid][0])) {
        // Add our Pay button, which will trigger Stripe Checkout.
        $form['actions']['webform_stripe_pay'] = array(
          '#type' => 'button',
          '#value' => $pay_text,
          '#attributes' => array('class' => array('webform-stripe-pay')),
          '#weight' => 15,
          '#attached' => array(
            'js' => array(
              array(
                'data' => array('webform_stripe' => webform_stripe_checkout_settings_js($component)),
                'type' => 'setting',
              ),
            ),
          ),
        );
      }

      // Only process one Stripe Payment component per form.
      break;
    }
  }
}

/**
 * Ajax callback which returns the form.
 */
function webform_stripe_ajax_callback($form, $form_state) {
  return $form;
}
