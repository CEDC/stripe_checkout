<?php
/**
 * @file
 * Enables the creation of a simple Stripe Checkout block.
 */

/**
 * Implements hook_block_info().
 */
function stripe_checkout_block_info() {
  $blocks = array();

  $module_is_enabled = config_get('stripe_checkout.settings','enabled');

  if ($module_is_enabled) {
    $blocks['stripe_checkout_donate'] = array(
      'info' => t('Stripe Checkout'),
      'description' => t('Stripe Checkout Donation Form.'),
      'cache' => BACKDROP_CACHE_GLOBAL,
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function stripe_checkout_block_view($delta = '', $settings = array(), $contexts = array()) {
  global $user;
  $config = config('stripe_checkout.settings');
  $apiconfig = config('stripe_api.settings');
  $currpage = current_path();
  $enabled = $config->get('donateblock-enabled');

  if ($enabled && $currpage != 'stripe_checkout/charge') {
    $block = array();
    $block['content']['#attached']['css'][] = backdrop_get_path('module', 'stripe_checkout') . '/css/stripe_checkout.css';
    $image = $config->get('image');
    $currency = $config->get('currency');
    $outer_button = check_plain($config->get('outer-button'));
    $inner_button = check_plain($config->get('inner-button'));
    $mode = $apiconfig->get('stripe_api_mode');
    if ($mode == 'live') {
      $key = $apiconfig->get('stripe_api_test_secret_key');
      $mode_warn = "";
    } else { 
      $key = $apiconfig->get('stripe_api_test_public_key');
      $mode_warn = "<div class='messages status'>Stripe Checkout is in test mode.</div>";
    }
    $name = check_plain($config->get('name'));
    $description = check_plain($config->get('description'));
    if (isset($_SESSION['stripe_checkout_amount_cents'])) {
      $amount = $_SESSION['stripe_checkout_amount_cents'];
    } else {
      $amount = $config->get('amount');
    }
    $prefill_email = $config->get('prefill-email');
    
    //Defaults
    if (!$amount) $amount = 2000;
    if (!$name) $name = config_get('system.core', 'site_name');
    if (!$description) $description = "Thank you for your support";
    if ($image) {
      $image_loaded = file_load($image);
      $image_uri = $image_loaded->uri;
      $image_url = file_create_url($image_uri);
    } else {
      $image_url = backdrop_get_logo();
    }
    ($prefill_email && $user->uid) ? $email = $user->mail : $email = "";
    ($config->get('shipping-addr')) ? $shipping_addr = 'true' : $shipping_addr = 'false';
    ($config->get('billing-addr')) ? $billing_addr = 'true' : $billing_addr = 'false';
    ($config->get('zip')) ? $zip = 'true' : $zip = 'false';
    
    switch ($delta) {
      case 'stripe_checkout_donate':
        if ($enabled) {
          $block['content'] = $mode_warn."<form action='/stripe_checkout/charge' method='POST'>
                                <label for='data-amount'>Amount (".$currency.")</label>
                                <input name='data-amount' type='text' id='data-amount' value='".($amount/100)."' list='suggested_amounts' />
                                  <datalist id='suggested_amounts'>
                                    <option>20</option>
                                    <option>40</option>
                                    <option>60</option>
                                    <option>100</option>
                                  </datalist>
                                <script
                                  src='https://checkout.stripe.com/checkout.js' class='stripe-button'
                                  data-key='".$key."'
                                  data-name='".$name."'
                                  data-description='".$description."'
                                  data-image='".$image_url."'
                                  data-locale='auto'
                                  data-zip-code='".$zip."'
                                  data-billing-address='".$billing_addr."'
                                  data-currency='".$currency."'
                                  data-panel-label='".$inner_button."'
                                  data-shipping-address='".$shipping_addr."'
                                  data-email='".$email."'
                                  data-label='".$outer_button."'
                                  data-allow-remember-me='true'>
                                </script>
                              </form>";
          $block['subject'] = t('Stripe Checkout Donate');
        }
        return $block;
        break;
      default:
        return NULL;
    }
  }
}

/**
 * Implements hook_permission().
 */
function stripe_checkout_permission() {
  return array(
    'administer stripe checkout' => array(
      'title' => t('Administer Stripe Checkout settings'),
      'description' => t('Grants access to change global Stripe Checkout credentials and settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function stripe_checkout_menu() {
  $items['admin/config/services/stripe_api/checkout'] = array(
    'title' => 'Checkout Settings',
    'description' => 'Settings for Stripe Checkout functionality',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('stripe_checkout_admin_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer stripe checkout'),
    'file' => 'stripe_checkout.admin.inc',
  );
  $items['stripe_checkout/charge'] = array(
    'title' => 'Thank you for your support',
    'description' => 'Please wait...',
    'page callback' => 'stripe_checkout_charge',
    'access callback' => 'user_access',
    'access arguments' => array('view published content'),
    'file' => 'stripe_checkout.charge.inc',
  );
  return $items;
}

/**
  * Implements hook_config_info().
  */
function stripe_checkout_config_info() {
  $prefixes['stripe_checkout.settings'] = array(
    'label' => t('Stripe Checkout settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_image_default_styles().
 */
function stripe_checkout_image_default_styles() {
  $styles['stripe_checkout'] = array(
    'label' => 'Stripe Checkout',
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 128,
          'height' => 128,
        ),
        'weight' => 1,
      ),
    ),
  );
  return $styles;
}

